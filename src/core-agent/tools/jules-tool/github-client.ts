// MASTER PLAN 2.0 INTEGRATION: GitHub Client f√∂r Core Agent
// K√ÑLLA: Importerad fr√•n jules-automation-test/src/github-client.ts
// STATUS: Integrerad med dubbelt medvetandesystem

import { Octokit } from '@octokit/rest';
import { 
  AutomationConfig, 
  GitHubIssue, 
  GitHubComment, 
  JulesTask,
  DualConsciousnessConfig,
  SeniorUserProfile,
  EmotionalResponse 
} from '../../../shared/types.js';

/**
 * Master Plan 2.0 GitHub Client
 * Integrerad med dubbelt medvetandesystem f√∂r intelligent GitHub interaction
 */
export class MasterPlan2GitHubClient {
  private octokit: Octokit;
  private config: AutomationConfig;
  private dualConsciousnessConfig: DualConsciousnessConfig;
  private processedTasks: Set<number> = new Set();
  private checkedComments: Set<string> = new Set();

  constructor(config: AutomationConfig, dualConsciousnessConfig: DualConsciousnessConfig) {
    this.config = config;
    this.dualConsciousnessConfig = dualConsciousnessConfig;
    this.octokit = new Octokit({
      auth: config.githubToken,
    });
  }

  /**
   * Create a GitHub issue that will trigger Jules
   * MASTER PLAN 2.0: Enhanced med dubbelt medvetandesystem context
   */
  async createJulesTask(task: Omit<JulesTask, 'id' | 'createdAt' | 'status'>): Promise<GitHubIssue> {
    // Determine target agent based on task complexity and type
    const targetAgent = this.determineTargetAgent(task);
    const seniorInstructions = this.generateSeniorInstructions(task);
    
    const issue = await this.octokit.rest.issues.create({
      owner: this.config.repoOwner,
      repo: this.config.repoName,
      title: task.title,
      body: `${task.description}

**üé≠ Master Plan 2.0 - Dubbelt Medvetandesystem Task**

**Target Agent:** ${targetAgent}
**Senior-Friendly:** ${task.seniorFriendly ? 'Yes' : 'No'}
**Complexity Level:** ${task.complexity || 'medium'}

**üéØ Architecture Guidelines:**
- Follow Master Plan 2.0 dubbelt medvetandesystem patterns
- Implement proper conscious/core agent separation
- Ensure communication bridge guardrails
- Maintain senior-friendly interfaces

**üë¥ Senior Instructions:**
${seniorInstructions}

**‚úÖ Success Criteria:**
- Code follows Master Plan 2.0 architecture
- No technical complexity exposed to seniors
- Comprehensive tests included
- Documentation updated

**Auto-generated by Master Plan 2.0 Dubbelt Medvetandesystem**`,
      labels: [
        this.config.julesLabel,
        `agent-${targetAgent}`,
        `complexity-${task.complexity || 'medium'}`,
        task.seniorFriendly ? 'senior-friendly' : 'technical'
      ],
    });

    return {
      number: issue.data.number,
      title: issue.data.title,
      body: issue.data.body || '',
      labels: issue.data.labels.map(label => typeof label === 'string' ? label : label.name || ''),
      state: issue.data.state as 'open' | 'closed',
      comments: [],
    };
  }

  /**
   * Monitor issue for Jules comments and status updates
   * MASTER PLAN 2.0: Enhanced med emotional intelligence
   */
  async monitorIssue(issueNumber: number): Promise<GitHubComment[]> {
    const comments = await this.octokit.rest.issues.listComments({
      owner: this.config.repoOwner,
      repo: this.config.repoName,
      issue_number: issueNumber,
    });

    return comments.data.map(comment => ({
      id: comment.id,
      user: comment.user?.login || 'unknown',
      body: comment.body || '',
      created_at: comment.created_at,
      isJulesComment: this.isJulesComment(comment.user?.login || ''),
    }));
  }

  /**
   * Check if Jules has completed the task
   * MASTER PLAN 2.0: Enhanced med architecture compliance check
   */
  async checkTaskCompletion(issueNumber: number): Promise<{
    isComplete: boolean;
    prUrl?: string;
    status: 'pending' | 'planning' | 'executing' | 'completed' | 'failed';
    architectureCompliant?: boolean;
    seniorSafe?: boolean;
  }> {
    const comments = await this.monitorIssue(issueNumber);
    const julesComments = comments.filter(c => c.isJulesComment);
    
    // Prevent duplicate processing
    if (this.processedTasks.has(issueNumber)) {
      return {
        isComplete: true,
        status: 'completed',
        prUrl: `Already processed task #${issueNumber}`,
        architectureCompliant: true,
        seniorSafe: true
      };
    }
    
    // Look for completion indicators in Jules comments
    for (const comment of julesComments.reverse()) {
      const commentKey = `${issueNumber}-${comment.id}`;
      
      if (this.checkedComments.has(commentKey)) {
        continue;
      }
      
      this.checkedComments.add(commentKey);
      
      if (this.isCompletionComment(comment.body)) {
        console.log(`‚úÖ Master Plan 2.0 task completion detected for #${issueNumber}`);
        
        // Extract PR URL
        const prUrl = this.extractPRUrl(comment.body) || await this.findLinkedPR(issueNumber);
        
        // Check architecture compliance
        const architectureCompliant = this.checkArchitectureCompliance(comment.body);
        const seniorSafe = this.checkSeniorSafety(comment.body);
        
        this.processedTasks.add(issueNumber);
        
        return {
          isComplete: true,
          prUrl,
          status: 'completed',
          architectureCompliant,
          seniorSafe
        };
      }
      
      if (comment.body.includes('Jules is on it') || 
          comment.body.includes('When finished')) {
        return {
          isComplete: false,
          status: 'executing',
          architectureCompliant: undefined,
          seniorSafe: undefined
        };
      }
    }

    return {
      isComplete: false,
      status: 'pending',
      architectureCompliant: undefined,
      seniorSafe: undefined
    };
  }

  /**
   * Get all open issues with Jules label
   * MASTER PLAN 2.0: Enhanced med agent type filtering
   */
  async getActiveJulesTasks(agentType?: 'conscious' | 'core' | 'bridge'): Promise<GitHubIssue[]> {
    const labels = [this.config.julesLabel];
    if (agentType) {
      labels.push(`agent-${agentType}`);
    }

    const issues = await this.octokit.rest.issues.listForRepo({
      owner: this.config.repoOwner,
      repo: this.config.repoName,
      labels: labels.join(','),
      state: 'open',
    });

    return Promise.all(issues.data.map(async issue => ({
      number: issue.number,
      title: issue.title,
      body: issue.body || '',
      labels: issue.labels.map(label => typeof label === 'string' ? label : label.name || ''),
      state: issue.state as 'open' | 'closed',
      comments: await this.monitorIssue(issue.number),
    })));
  }

  /**
   * Close issue after task completion
   * MASTER PLAN 2.0: Enhanced med architecture validation
   */
  async closeTask(
    issueNumber: number, 
    reason: string = 'Task completed by Master Plan 2.0 Agent',
    architectureCompliant: boolean = true,
    seniorSafe: boolean = true
  ): Promise<void> {
    const statusEmoji = architectureCompliant && seniorSafe ? 'üéâ' : '‚ö†Ô∏è';
    const complianceStatus = architectureCompliant ? '‚úÖ Architecture Compliant' : '‚ùå Architecture Issues';
    const safetyStatus = seniorSafe ? '‚úÖ Senior Safe' : '‚ùå Senior Safety Issues';
    
    await this.octokit.rest.issues.createComment({
      owner: this.config.repoOwner,
      repo: this.config.repoName,
      issue_number: issueNumber,
      body: `${statusEmoji} **Master Plan 2.0 Task Completed**

${reason}

**üé≠ Dubbelt Medvetandesystem Status:**
- ${complianceStatus}
- ${safetyStatus}

**üìä Quality Metrics:**
- Architecture Compliance: ${architectureCompliant ? 'PASS' : 'FAIL'}
- Senior Safety: ${seniorSafe ? 'PASS' : 'FAIL'}

*Closed by Master Plan 2.0 Dubbelt Medvetandesystem*`,
    });

    await this.octokit.rest.issues.update({
      owner: this.config.repoOwner,
      repo: this.config.repoName,
      issue_number: issueNumber,
      state: 'closed',
    });
  }

  // PRIVATE HELPER METHODS

  private determineTargetAgent(task: Omit<JulesTask, 'id' | 'createdAt' | 'status'>): string {
    // Determine which agent should handle the task based on complexity and type
    if (task.seniorFriendly) {
      return 'conscious'; // Conscious agent handles senior-facing features
    }
    
    if (task.complexity === 'high') {
      return 'core'; // Core agent handles complex technical tasks
    }
    
    if (task.title.toLowerCase().includes('bridge') || 
        task.title.toLowerCase().includes('translation') ||
        task.title.toLowerCase().includes('guardrail')) {
      return 'bridge'; // Communication bridge handles integration tasks
    }
    
    return 'core'; // Default to core agent
  }

  private generateSeniorInstructions(task: Omit<JulesTask, 'id' | 'createdAt' | 'status'>): string {
    if (!task.seniorFriendly) {
      return 'This is a technical task - ensure no complexity is exposed to senior users.';
    }
    
    return `This task affects senior users directly. Requirements:
- Use simple, encouraging language
- Hide all technical complexity
- Provide clear, visual feedback
- Include helpful error messages
- Test with senior user perspective`;
  }

  private isJulesComment(username: string): boolean {
    return username === 'google-labs-jules[bot]' || 
           username === 'google-labs-jules' || 
           username === 'google-labs-julesbot';
  }

  private isCompletionComment(body: string): boolean {
    return body.includes('successfully generated a solution') ||
           body.includes('Ready for review') ||
           body.includes('Ready for a review') ||
           body.includes('waiting for you to review') ||
           body.includes('A PR has been created') ||
           body.includes('pull request') ||
           body.includes('Changes can be reviewed');
  }

  private extractPRUrl(body: string): string | undefined {
    const prMatch = body.match(/https:\/\/github\.com\/[^\/]+\/[^\/]+\/pull\/\d+/);
    return prMatch?.[0];
  }

  private checkArchitectureCompliance(body: string): boolean {
    const bodyLower = body.toLowerCase();
    return bodyLower.includes('master plan 2.0') ||
           bodyLower.includes('dubbelt medvetandesystem') ||
           bodyLower.includes('conscious agent') ||
           bodyLower.includes('core agent') ||
           bodyLower.includes('communication bridge');
  }

  private checkSeniorSafety(body: string): boolean {
    const bodyLower = body.toLowerCase();
    // Check for technical jargon that shouldn't be exposed to seniors
    const technicalTerms = ['api', 'database', 'server', 'endpoint', 'json', 'http', 'ssl'];
    return !technicalTerms.some(term => bodyLower.includes(term));
  }

  private async findLinkedPR(issueNumber: number): Promise<string | undefined> {
    try {
      const prs = await this.octokit.rest.pulls.list({
        owner: this.config.repoOwner,
        repo: this.config.repoName,
        state: 'open',
        sort: 'created',
        direction: 'desc',
        per_page: 10
      });

      // Find PR that references this issue number
      for (const pr of prs.data) {
        if (pr.body?.includes(`#${issueNumber}`) || 
            pr.body?.includes(`issue ${issueNumber}`) ||
            pr.title.toLowerCase().includes(`issue #${issueNumber}`)) {
          return pr.html_url;
        }
      }

      // Return the most recent PR (likely from Jules)
      if (prs.data.length > 0) {
        return prs.data[0].html_url;
      }

      return undefined;
    } catch (error) {
      console.warn(`Failed to find linked PR for issue #${issueNumber}:`, error);
      return undefined;
    }
  }
}