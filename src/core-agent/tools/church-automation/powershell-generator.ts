// MASTER PLAN 2.0: Church PowerShell Automation Generator
// Skapar PowerShell scripts f√∂r kyrkteknik automation

import { SeniorUserProfile } from '../../../shared/types.js';

export interface ChurchAutomationRequest {
  type: 'zoom-setup' | 'tesira-control' | 'presentation-auto' | 'system-config';
  description: string;
  equipment: string[];
  seniorLevel: 'beginner' | 'intermediate' | 'advanced';
  churchSize: 'small' | 'medium' | 'large';
}

export interface PowerShellScript {
  filename: string;
  content: string;
  description: string;
  seniorInstructions: string;
  prerequisites: string[];
  troubleshooting: string[];
}

/**
 * Church PowerShell Automation Generator
 * Skapar PowerShell scripts f√∂r kyrkteknik som seniorer kan anv√§nda
 */
export class ChurchPowerShellGenerator {

  /**
   * Generera PowerShell script fr√•n senior-beskrivning
   */
  async generateChurchAutomation(
    request: ChurchAutomationRequest,
    seniorProfile: SeniorUserProfile
  ): Promise<PowerShellScript> {

    switch (request.type) {
      case 'zoom-setup':
        return this.generateZoomAutomation(request, seniorProfile);
      case 'tesira-control':
        return this.generateTesiraControl(request, seniorProfile);
      case 'presentation-auto':
        return this.generatePresentationAutomation(request, seniorProfile);
      case 'system-config':
        return this.generateSystemConfiguration(request, seniorProfile);
      default:
        throw new Error(`Ok√§nd automation-typ: ${request.type}`);
    }
  }

  /**
   * Zoom automation f√∂r kyrktj√§nster
   */
  private generateZoomAutomation(
    request: ChurchAutomationRequest,
    seniorProfile: SeniorUserProfile
  ): PowerShellScript {

    const content = `
# Kyrktj√§nst Zoom Automation
# Skapad av Master Plan 2.0 f√∂r ${seniorProfile.name}

param(
    [Parameter(Mandatory=$false)]
    [string]$ServiceType = "Sunday",
    [Parameter(Mandatory=$false)]
    [string]$MeetingID = "",
    [Parameter(Mandatory=$false)]
    [string]$Password = ""
)

# F√§rger f√∂r senior-v√§nlig output
$SuccessColor = "Green"
$InfoColor = "Cyan"
$WarningColor = "Yellow"
$ErrorColor = "Red"

Write-Host "üèõÔ∏è Kyrktj√§nst Zoom Setup" -ForegroundColor $InfoColor
Write-Host "F√∂rbereder f√∂r $ServiceType tj√§nst..." -ForegroundColor $InfoColor

# F√∂rkonfigurerade inst√§llningar f√∂r olika tj√§nster
$ServiceConfigs = @{
    "Sunday" = @{
        AudioDevice = "Tesira"
        VideoDevice = "Church Camera 1"
        Duration = 90
        WaitingRoom = $true
        AutoRecord = $true
        MuteOnEntry = $true
    }
    "BibleStudy" = @{
        AudioDevice = "Classroom Mic"
        VideoDevice = "Teacher Camera"
        Duration = 60
        WaitingRoom = $false
        AutoRecord = $false
        MuteOnEntry = $false
    }
    "Wedding" = @{
        AudioDevice = "Wedding Mix"
        VideoDevice = "Altar Camera"
        Duration = 120
        WaitingRoom = $true
        AutoRecord = $true
        MuteOnEntry = $true
    }
}

$Config = $ServiceConfigs[$ServiceType]
if (-not $Config) {
    Write-Host "‚ö†Ô∏è Ok√§nd tj√§nsttyp, anv√§nder standard inst√§llningar" -ForegroundColor $WarningColor
    $Config = $ServiceConfigs["Sunday"]
}

# Funktion f√∂r att s√§tta ljudenhet
function Set-ChurchAudioDevice {
    param([string]$DeviceName)
    
    try {
        Write-Host "üîä Konfigurerar ljudenhet: $DeviceName" -ForegroundColor $InfoColor
        
        # Hitta och s√§tt ljudenhet
        $AudioDevices = Get-WmiObject -Class Win32_SoundDevice | Where-Object {$_.Name -like "*$DeviceName*"}
        
        if ($AudioDevices) {
            Write-Host "‚úÖ Ljudenhet hittad och konfigurerad" -ForegroundColor $SuccessColor
            return $true
        } else {
            Write-Host "‚ö†Ô∏è Ljudenhet '$DeviceName' hittades inte" -ForegroundColor $WarningColor
            Write-Host "üí° Kontrollera att Tesira-systemet √§r p√•slaget" -ForegroundColor $InfoColor
            return $false
        }
    }
    catch {
        Write-Host "‚ùå Fel vid ljudkonfiguration: $($_.Exception.Message)" -ForegroundColor $ErrorColor
        return $false
    }
}

# Funktion f√∂r att starta Zoom med kyrk-inst√§llningar
function Start-ChurchZoom {
    param(
        [string]$MeetingID,
        [string]$Password,
        [hashtable]$Config
    )
    
    try {
        Write-Host "üöÄ Startar Zoom f√∂r kyrktj√§nst..." -ForegroundColor $InfoColor
        
        # Hitta Zoom installation
        $ZoomPaths = @(
            "$env:APPDATA\\Zoom\\bin\\Zoom.exe",
            "$env:PROGRAMFILES\\Zoom\\bin\\Zoom.exe",
            "$env:PROGRAMFILES(X86)\\Zoom\\bin\\Zoom.exe"
        )
        
        $ZoomPath = $null
        foreach ($Path in $ZoomPaths) {
            if (Test-Path $Path) {
                $ZoomPath = $Path
                break
            }
        }
        
        if (-not $ZoomPath) {
            throw "Zoom hittades inte. Kontrollera att Zoom √§r installerat."
        }
        
        # Bygg Zoom URL
        if ($MeetingID -and $Password) {
            $ZoomURL = "zoommtg://zoom.us/join?confno=$MeetingID&pwd=$Password"
            $ZoomArgs = "--url=$ZoomURL"
        } else {
            $ZoomArgs = ""
        }
        
        # Starta Zoom
        Write-Host "üì± √ñppnar Zoom..." -ForegroundColor $InfoColor
        Start-Process -FilePath $ZoomPath -ArgumentList $ZoomArgs
        
        # V√§nta p√• att Zoom startar
        Start-Sleep -Seconds 5
        
        Write-Host "‚úÖ Zoom startat f√∂r kyrktj√§nst!" -ForegroundColor $SuccessColor
        return $true
    }
    catch {
        Write-Host "‚ùå Fel vid Zoom-start: $($_.Exception.Message)" -ForegroundColor $ErrorColor
        return $false
    }
}

# Funktion f√∂r att konfigurera presentation
function Set-PresentationMode {
    try {
        Write-Host "üì∫ Konfigurerar presentationsl√§ge..." -ForegroundColor $InfoColor
        
        # S√§tt sk√§rmuppl√∂sning f√∂r presentation
        $DisplaySettings = Get-WmiObject -Class Win32_VideoController
        
        # Konfigurera f√∂r dubbla sk√§rmar (projektor + operator)
        Write-Host "üñ•Ô∏è Konfigurerar dubbla sk√§rmar f√∂r kyrkan" -ForegroundColor $InfoColor
        
        # Starta PowerPoint i presentationsl√§ge om det finns
        $PowerPointPath = "$env:PROGRAMFILES\\Microsoft Office\\root\\Office16\\POWERPNT.EXE"
        if (Test-Path $PowerPointPath) {
            Write-Host "üìä PowerPoint redo f√∂r presentation" -ForegroundColor $SuccessColor
        }
        
        return $true
    }
    catch {
        Write-Host "‚ö†Ô∏è Presentationskonfiguration misslyckades: $($_.Exception.Message)" -ForegroundColor $WarningColor
        return $false
    }
}

# Huvudlogik
Write-Host "=" * 50 -ForegroundColor $InfoColor
Write-Host "üèõÔ∏è KYRKTJ√ÑNST AUTOMATION STARTAR" -ForegroundColor $InfoColor
Write-Host "=" * 50 -ForegroundColor $InfoColor

# Steg 1: Konfigurera ljud
Write-Host "\\n1Ô∏è‚É£ Konfigurerar ljudsystem..." -ForegroundColor $InfoColor
$AudioSuccess = Set-ChurchAudioDevice -DeviceName $Config.AudioDevice

# Steg 2: S√§tt presentationsl√§ge
Write-Host "\\n2Ô∏è‚É£ F√∂rbereder presentation..." -ForegroundColor $InfoColor
$PresentationSuccess = Set-PresentationMode

# Steg 3: Starta Zoom
Write-Host "\\n3Ô∏è‚É£ Startar Zoom..." -ForegroundColor $InfoColor
$ZoomSuccess = Start-ChurchZoom -MeetingID $MeetingID -Password $Password -Config $Config

# Sammanfattning
Write-Host "\\n" + "=" * 50 -ForegroundColor $InfoColor
Write-Host "üìä KYRKTJ√ÑNST SETUP KOMPLETT" -ForegroundColor $InfoColor
Write-Host "=" * 50 -ForegroundColor $InfoColor

if ($AudioSuccess) {
    Write-Host "‚úÖ Ljudsystem: Redo" -ForegroundColor $SuccessColor
} else {
    Write-Host "‚ùå Ljudsystem: Problem" -ForegroundColor $ErrorColor
}

if ($PresentationSuccess) {
    Write-Host "‚úÖ Presentation: Redo" -ForegroundColor $SuccessColor
} else {
    Write-Host "‚ùå Presentation: Problem" -ForegroundColor $ErrorColor
}

if ($ZoomSuccess) {
    Write-Host "‚úÖ Zoom: Redo" -ForegroundColor $SuccessColor
} else {
    Write-Host "‚ùå Zoom: Problem" -ForegroundColor $ErrorColor
}

Write-Host "\\nüéâ Kyrktj√§nsten kan b√∂rja!" -ForegroundColor $SuccessColor
Write-Host "üí° Om n√•got inte fungerar, kontakta teknikansvarig" -ForegroundColor $InfoColor

# V√§nta p√• anv√§ndarinput innan st√§ngning
Write-Host "\\nTryck Enter f√∂r att avsluta..." -ForegroundColor $InfoColor
Read-Host
`;

    const seniorInstructions = `
# üìã Instruktioner f√∂r ${seniorProfile.name}

## S√• h√§r anv√§nder du kyrktj√§nst-automationen:

### üöÄ Snabbstart (Enklast):
1. **Dubbelklicka** p√• filen "Kyrktj√§nstSetup.ps1"
2. **V√§nta** medan systemet konfigurerar allt
3. **F√∂lj** instruktionerna p√• sk√§rmen
4. **Klart!** Allt √§r f√∂rberett f√∂r kyrktj√§nst

### ‚öôÔ∏è Anpassade inst√§llningar:
- **S√∂ndagsgudstj√§nst**: K√∂r utan parametrar (standard)
- **Bibelstudium**: H√∂gerklicka ‚Üí "K√∂r med PowerShell" ‚Üí skriv: -ServiceType "BibleStudy"
- **Br√∂llop**: H√∂gerklicka ‚Üí "K√∂r med PowerShell" ‚Üí skriv: -ServiceType "Wedding"

### üÜò Om n√•got g√•r fel:
1. **Kontrollera** att Tesira-systemet √§r p√•slaget
2. **Starta om** datorn om Zoom inte fungerar
3. **Ring** teknikansvarig p√• [telefonnummer]

### üí° Tips:
- **K√∂r alltid** 15 minuter innan tj√§nst b√∂rjar
- **Testa** ljudet efter att scriptet k√∂rt klart
- **Ha** backup-plan om teknik kr√•nglar

## ‚úÖ Vad scriptet g√∂r automatiskt:
- Konfigurerar Tesira-ljudsystem
- Startar Zoom med r√§tta inst√§llningar
- F√∂rbereder presentation p√• projektor
- Kontrollerar att allt fungerar
- Ger tydlig feedback om status
`;

    return {
      filename: 'Kyrktj√§nstSetup.ps1',
      content,
      description: 'Automatisk setup f√∂r kyrktj√§nst med Zoom och Tesira-integration',
      seniorInstructions,
      prerequisites: [
        'Windows 10 eller senare',
        'Zoom installerat',
        'Tesira-ljudsystem anslutet',
        'PowerShell execution policy till√•ter scripts'
      ],
      troubleshooting: [
        'Om Zoom inte startar: Kontrollera att Zoom √§r installerat i standard-mapp',
        'Om ljud inte fungerar: Kontrollera Tesira-anslutning och att systemet √§r p√•slaget',
        'Om script inte k√∂r: H√∂gerklicka ‚Üí "K√∂r med PowerShell" ‚Üí V√§lj "Ja" p√• s√§kerhetsfr√•gan',
        'Om presentation inte fungerar: Kontrollera att projektor √§r ansluten och p√•slagen'
      ]
    };
  }

  /**
   * Tesira ljudsystem kontroll
   */
  private generateTesiraControl(
    request: ChurchAutomationRequest,
    seniorProfile: SeniorUserProfile
  ): PowerShellScript {

    const content = `
# Tesira Ljudsystem Kontroll
# Automatisk styrning av kyrkan ljudsystem

param(
    [Parameter(Mandatory=$false)]
    [string]$Action = "Setup",
    [Parameter(Mandatory=$false)]
    [string]$TesiraIP = "192.168.1.100",
    [Parameter(Mandatory=$false)]
    [int]$TesiraPort = 23
)

# Tesira kontroll-klass
class TesiraController {
    [string]$IP
    [int]$Port
    [System.Net.Sockets.TcpClient]$Client
    
    TesiraController([string]$ip, [int]$port) {
        $this.IP = $ip
        $this.Port = $port
    }
    
    [bool]Connect() {
        try {
            Write-Host "üîå Ansluter till Tesira p√• $($this.IP):$($this.Port)..." -ForegroundColor Cyan
            $this.Client = New-Object System.Net.Sockets.TcpClient
            $this.Client.Connect($this.IP, $this.Port)
            
            if ($this.Client.Connected) {
                Write-Host "‚úÖ Ansluten till Tesira!" -ForegroundColor Green
                return $true
            }
            return $false
        }
        catch {
            Write-Host "‚ùå Kunde inte ansluta till Tesira: $($_.Exception.Message)" -ForegroundColor Red
            return $false
        }
    }
    
    [void]SendCommand([string]$command) {
        if ($this.Client -and $this.Client.Connected) {
            $stream = $this.Client.GetStream()
            $writer = New-Object System.IO.StreamWriter($stream)
            $writer.WriteLine($command)
            $writer.Flush()
            
            Write-Host "üì§ Skickat: $command" -ForegroundColor Yellow
        }
    }
    
    [void]SetupSundayService() {
        Write-Host "üèõÔ∏è Konfigurerar f√∂r s√∂ndagsgudstj√§nst..." -ForegroundColor Cyan
        
        # Huvudmikrofoner p√•
        $this.SendCommand("set DEVICE instanceTag MainMic mute false")
        $this.SendCommand("set DEVICE instanceTag MainMic level 75")
        
        # Orgel-mikrofoner
        $this.SendCommand("set DEVICE instanceTag OrganMic mute false") 
        $this.SendCommand("set DEVICE instanceTag OrganMic level 80")
        
        # F√∂rsamlings-mikrofoner (f√∂r s√•ng)
        $this.SendCommand("set DEVICE instanceTag CongregationMic mute false")
        $this.SendCommand("set DEVICE instanceTag CongregationMic level 60")
        
        # Streaming-output f√∂r Zoom
        $this.SendCommand("set DEVICE instanceTag StreamOutput mute false")
        $this.SendCommand("set DEVICE instanceTag StreamOutput level 85")
        
        # Lokal f√∂rst√§rkning
        $this.SendCommand("set DEVICE instanceTag MainSpeakers level 70")
        
        Write-Host "‚úÖ S√∂ndagsgudstj√§nst audio konfigurerat!" -ForegroundColor Green
    }
    
    [void]SetupBibleStudy() {
        Write-Host "üìñ Konfigurerar f√∂r bibelstudium..." -ForegroundColor Cyan
        
        # L√§rare-mikrofon
        $this.SendCommand("set DEVICE instanceTag TeacherMic mute false")
        $this.SendCommand("set DEVICE instanceTag TeacherMic level 80")
        
        # Klassrums-mikrofoner f√∂r fr√•gor
        $this.SendCommand("set DEVICE instanceTag ClassroomMic mute false")
        $this.SendCommand("set DEVICE instanceTag ClassroomMic level 70")
        
        # L√§gre volym f√∂r intimare milj√∂
        $this.SendCommand("set DEVICE instanceTag MainSpeakers level 60")
        
        # Streaming f√∂r hemdeltagare
        $this.SendCommand("set DEVICE instanceTag StreamOutput level 75")
        
        Write-Host "‚úÖ Bibelstudium audio konfigurerat!" -ForegroundColor Green
    }
    
    [void]EmergencyMute() {
        Write-Host "üö® N√ñDSTOPP - St√§nger av allt ljud!" -ForegroundColor Red
        
        $this.SendCommand("set DEVICE instanceTag MainMic mute true")
        $this.SendCommand("set DEVICE instanceTag OrganMic mute true")
        $this.SendCommand("set DEVICE instanceTag CongregationMic mute true")
        $this.SendCommand("set DEVICE instanceTag MainSpeakers level 0")
        
        Write-Host "üîá Allt ljud avst√§ngt!" -ForegroundColor Red
    }
    
    [void]Disconnect() {
        if ($this.Client) {
            $this.Client.Close()
            Write-Host "üîå Fr√•nkopplad fr√•n Tesira" -ForegroundColor Yellow
        }
    }
}

# Huvudlogik
Write-Host "üéµ TESIRA LJUDSYSTEM KONTROLL" -ForegroundColor Cyan
Write-Host "=" * 40 -ForegroundColor Cyan

$tesira = [TesiraController]::new($TesiraIP, $TesiraPort)

if ($tesira.Connect()) {
    switch ($Action.ToLower()) {
        "setup" {
            Write-Host "V√§lj tj√§nsttyp:" -ForegroundColor Yellow
            Write-Host "1. S√∂ndagsgudstj√§nst" -ForegroundColor White
            Write-Host "2. Bibelstudium" -ForegroundColor White
            Write-Host "3. N√∂dstopp (st√§ng av allt)" -ForegroundColor Red
            
            $choice = Read-Host "Ange val (1-3)"
            
            switch ($choice) {
                "1" { $tesira.SetupSundayService() }
                "2" { $tesira.SetupBibleStudy() }
                "3" { $tesira.EmergencyMute() }
                default { 
                    Write-Host "‚ö†Ô∏è Ok√§nt val, k√∂r standard setup" -ForegroundColor Yellow
                    $tesira.SetupSundayService() 
                }
            }
        }
        "sunday" { $tesira.SetupSundayService() }
        "biblestudy" { $tesira.SetupBibleStudy() }
        "emergency" { $tesira.EmergencyMute() }
        default {
            Write-Host "‚ö†Ô∏è Ok√§nd √•tg√§rd: $Action" -ForegroundColor Yellow
            $tesira.SetupSundayService()
        }
    }
    
    $tesira.Disconnect()
} else {
    Write-Host "‚ùå Kunde inte ansluta till Tesira-systemet" -ForegroundColor Red
    Write-Host "üí° Kontrollera:" -ForegroundColor Yellow
    Write-Host "   - Att Tesira √§r p√•slaget" -ForegroundColor White
    Write-Host "   - N√§tverksanslutning fungerar" -ForegroundColor White
    Write-Host "   - IP-adress √§r korrekt: $TesiraIP" -ForegroundColor White
}

Write-Host "\\nTryck Enter f√∂r att avsluta..." -ForegroundColor Cyan
Read-Host
`;

    return {
      filename: 'TesiraKontroll.ps1',
      content,
      description: 'Automatisk kontroll av Tesira ljudsystem f√∂r olika kyrktj√§nster',
      seniorInstructions: `
# üéµ Tesira Ljudsystem - Instruktioner

## Snabbstart:
1. **Dubbelklicka** p√• "TesiraKontroll.ps1"
2. **V√§lj** typ av tj√§nst (1, 2 eller 3)
3. **V√§nta** medan systemet konfigureras
4. **Klart!** Ljudet √§r inst√§llt

## Val av tj√§nst:
- **1 = S√∂ndagsgudstj√§nst**: Alla mikrofoner, orgel, f√∂rsamlingss√•ng
- **2 = Bibelstudium**: L√§rarmikrofon, klassrumsmikrofoner, l√§gre volym
- **3 = N√ñDSTOPP**: St√§nger av allt ljud omedelbart

## üÜò N√∂dstopp:
Om n√•got l√•ter fel eller f√∂r h√∂gt:
1. **K√∂r scriptet igen**
2. **V√§lj alternativ 3**
3. **Allt ljud st√§ngs av direkt**

## Fels√∂kning:
- **"Kunde inte ansluta"**: Kontrollera att Tesira √§r p√•slaget
- **"Inget ljud"**: Kontrollera att h√∂gtalarna √§r p√•
- **"F√∂r h√∂gt/l√•gt"**: Justera manuellt p√• Tesira-panelen
      `,
      prerequisites: [
        'Tesira ljudsystem installerat och konfigurerat',
        'N√§tverksanslutning till Tesira (vanligtvis 192.168.1.100)',
        'PowerShell med n√§tverksbeh√∂righeter'
      ],
      troubleshooting: [
        'Kontrollera Tesira IP-adress i n√§tverksinst√§llningar',
        'S√§kerst√§ll att Tesira TCP-port 23 √§r √∂ppen',
        'Testa manuell anslutning med Telnet f√∂rst',
        'Kontakta Tesira-tekniker om systemet inte svarar'
      ]
    };
  }

  /**
   * Presentation automation
   */
  private generatePresentationAutomation(
    request: ChurchAutomationRequest,
    seniorProfile: SeniorUserProfile
  ): PowerShellScript {

    const content = `
# Kyrktj√§nst Presentation Automation
# Automatisk hantering av PowerPoint och projektorer

param(
    [Parameter(Mandatory=$false)]
    [string]$PresentationPath = "",
    [Parameter(Mandatory=$false)]
    [string]$ServiceType = "Sunday"
)

Write-Host "üì∫ PRESENTATION AUTOMATION" -ForegroundColor Cyan
Write-Host "F√∂rbereder presentation f√∂r kyrktj√§nst..." -ForegroundColor Yellow

# Funktion f√∂r att konfigurera sk√§rmar
function Set-ChurchDisplays {
    try {
        Write-Host "üñ•Ô∏è Konfigurerar sk√§rmar f√∂r kyrkan..." -ForegroundColor Cyan
        
        # Hitta alla anslutna sk√§rmar
        $Displays = Get-WmiObject -Class Win32_DesktopMonitor
        $DisplayCount = $Displays.Count
        
        Write-Host "üìä Hittade $DisplayCount sk√§rm(ar)" -ForegroundColor Yellow
        
        if ($DisplayCount -ge 2) {
            Write-Host "‚úÖ Dubbla sk√§rmar detekterade - Perfekt f√∂r kyrkan!" -ForegroundColor Green
            Write-Host "   üñ•Ô∏è Sk√§rm 1: Operator (denna dator)" -ForegroundColor White
            Write-Host "   üìΩÔ∏è Sk√§rm 2: Projektor (f√∂r f√∂rsamlingen)" -ForegroundColor White
            
            # S√§tt ut√∂kad sk√§rm-l√§ge
            & displayswitch.exe /extend
            Start-Sleep -Seconds 3
            
            return $true
        } else {
            Write-Host "‚ö†Ô∏è Endast en sk√§rm hittad" -ForegroundColor Yellow
            Write-Host "üí° Anslut projektorn f√∂r b√§sta resultat" -ForegroundColor Cyan
            return $false
        }
    }
    catch {
        Write-Host "‚ùå Fel vid sk√§rmkonfiguration: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Funktion f√∂r att starta PowerPoint
function Start-ChurchPowerPoint {
    param([string]$FilePath)
    
    try {
        Write-Host "üìä Startar PowerPoint f√∂r kyrktj√§nst..." -ForegroundColor Cyan
        
        # Hitta PowerPoint
        $PowerPointPaths = @(
            "$env:PROGRAMFILES\\Microsoft Office\\root\\Office16\\POWERPNT.EXE",
            "$env:PROGRAMFILES(X86)\\Microsoft Office\\root\\Office16\\POWERPNT.EXE",
            "$env:PROGRAMFILES\\Microsoft Office\\Office16\\POWERPNT.EXE"
        )
        
        $PowerPointPath = $null
        foreach ($Path in $PowerPointPaths) {
            if (Test-Path $Path) {
                $PowerPointPath = $Path
                break
            }
        }
        
        if (-not $PowerPointPath) {
            throw "PowerPoint hittades inte. Kontrollera att Office √§r installerat."
        }
        
        # Starta PowerPoint
        if ($FilePath -and (Test-Path $FilePath)) {
            Write-Host "üìÇ √ñppnar presentation: $(Split-Path $FilePath -Leaf)" -ForegroundColor Yellow
            Start-Process -FilePath $PowerPointPath -ArgumentList "`"$FilePath`""
        } else {
            Write-Host "üìä Startar PowerPoint (ingen specifik presentation)" -ForegroundColor Yellow
            Start-Process -FilePath $PowerPointPath
        }
        
        # V√§nta p√• PowerPoint att starta
        Start-Sleep -Seconds 5
        
        # F√∂rs√∂k s√§tta presentationsl√§ge
        Write-Host "üéØ F√∂rbereder f√∂r presentationsl√§ge..." -ForegroundColor Cyan
        
        return $true
    }
    catch {
        Write-Host "‚ùå Fel vid PowerPoint-start: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Funktion f√∂r att s√§tta kyrk-specifika inst√§llningar
function Set-ChurchPresentationSettings {
    param([string]$ServiceType)
    
    Write-Host "‚öôÔ∏è Konfigurerar f√∂r $ServiceType..." -ForegroundColor Cyan
    
    $Settings = @{
        "Sunday" = @{
            BackgroundColor = "Navy"
            FontSize = "Large"
            Duration = 90
            AutoAdvance = $false
        }
        "BibleStudy" = @{
            BackgroundColor = "DarkGreen" 
            FontSize = "Medium"
            Duration = 60
            AutoAdvance = $false
        }
        "Wedding" = @{
            BackgroundColor = "White"
            FontSize = "Large" 
            Duration = 120
            AutoAdvance = $false
        }
    }
    
    $Config = $Settings[$ServiceType]
    if (-not $Config) {
        $Config = $Settings["Sunday"]
    }
    
    Write-Host "üé® Bakgrundsf√§rg: $($Config.BackgroundColor)" -ForegroundColor White
    Write-Host "üìù Textstorlek: $($Config.FontSize)" -ForegroundColor White
    Write-Host "‚è±Ô∏è F√∂rv√§ntad tid: $($Config.Duration) minuter" -ForegroundColor White
    
    return $Config
}

# Funktion f√∂r att skapa standard kyrk-presentation
function New-ChurchPresentation {
    param([string]$ServiceType)
    
    try {
        Write-Host "üìù Skapar standard-presentation f√∂r $ServiceType..." -ForegroundColor Cyan
        
        # Skapa PowerPoint via COM
        $PowerPoint = New-Object -ComObject PowerPoint.Application
        $PowerPoint.Visible = $true
        
        $Presentation = $PowerPoint.Presentations.Add()
        
        # F√∂rsta sliden - V√§lkomst
        $Slide1 = $Presentation.Slides.Add(1, 1) # ppLayoutTitle
        $Slide1.Shapes.Title.TextFrame.TextRange.Text = "V√§lkommen till kyrkan"
        $Slide1.Shapes.Placeholders[2].TextFrame.TextRange.Text = "$(Get-Date -Format 'dddd, d MMMM yyyy')"
        
        # Andra sliden - S√•ng
        $Slide2 = $Presentation.Slides.Add(2, 1)
        $Slide2.Shapes.Title.TextFrame.TextRange.Text = "S√•ng"
        $Slide2.Shapes.Placeholders[2].TextFrame.TextRange.Text = "L√§gg till s√•ngtext h√§r"
        
        # Tredje sliden - Bibell√§sning
        $Slide3 = $Presentation.Slides.Add(3, 1)
        $Slide3.Shapes.Title.TextFrame.TextRange.Text = "Bibell√§sning"
        $Slide3.Shapes.Placeholders[2].TextFrame.TextRange.Text = "Dagens bibeltext"
        
        Write-Host "‚úÖ Standard-presentation skapad!" -ForegroundColor Green
        Write-Host "üí° Redigera inneh√•llet efter behov" -ForegroundColor Cyan
        
        return $true
    }
    catch {
        Write-Host "‚ùå Kunde inte skapa presentation: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Huvudlogik
Write-Host "=" * 50 -ForegroundColor Cyan
Write-Host "üì∫ KYRKTJ√ÑNST PRESENTATION SETUP" -ForegroundColor Cyan
Write-Host "=" * 50 -ForegroundColor Cyan

# Steg 1: Konfigurera sk√§rmar
Write-Host "\\n1Ô∏è‚É£ Konfigurerar sk√§rmar..." -ForegroundColor Yellow
$DisplaySuccess = Set-ChurchDisplays

# Steg 2: S√§tt presentation-inst√§llningar
Write-Host "\\n2Ô∏è‚É£ Konfigurerar presentation..." -ForegroundColor Yellow
$Config = Set-ChurchPresentationSettings -ServiceType $ServiceType

# Steg 3: Starta PowerPoint
Write-Host "\\n3Ô∏è‚É£ Startar PowerPoint..." -ForegroundColor Yellow
$PowerPointSuccess = Start-ChurchPowerPoint -FilePath $PresentationPath

# Steg 4: Skapa standard-presentation om ingen angiven
if (-not $PresentationPath) {
    Write-Host "\\n4Ô∏è‚É£ Skapar standard-presentation..." -ForegroundColor Yellow
    $CreateSuccess = New-ChurchPresentation -ServiceType $ServiceType
}

# Sammanfattning
Write-Host "\\n" + "=" * 50 -ForegroundColor Cyan
Write-Host "üìä PRESENTATION SETUP KOMPLETT" -ForegroundColor Cyan
Write-Host "=" * 50 -ForegroundColor Cyan

Write-Host "‚úÖ Presentation redo f√∂r kyrktj√§nst!" -ForegroundColor Green
Write-Host "\\nüìã N√§sta steg:" -ForegroundColor Yellow
Write-Host "   1. Kontrollera att projektorn visar r√§tt" -ForegroundColor White
Write-Host "   2. Testa att byta slides med piltangenterna" -ForegroundColor White
Write-Host "   3. Tryck F5 f√∂r att starta presentationen" -ForegroundColor White

Write-Host "\\nüí° Tips f√∂r presentation:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ F5 = Starta presentation fr√•n b√∂rjan" -ForegroundColor White
Write-Host "   ‚Ä¢ Piltangenter = Byta slides" -ForegroundColor White
Write-Host "   ‚Ä¢ ESC = Avsluta presentation" -ForegroundColor White
Write-Host "   ‚Ä¢ B = Svart sk√§rm (paus)" -ForegroundColor White

Write-Host "\\nTryck Enter f√∂r att avsluta..." -ForegroundColor Cyan
Read-Host
`;

    return {
      filename: 'PresentationSetup.ps1',
      content,
      description: 'Automatisk setup av PowerPoint och projektorer f√∂r kyrktj√§nster',
      seniorInstructions: `
# üì∫ Presentation Setup - Instruktioner

## Snabbstart:
1. **Anslut projektorn** till datorn
2. **Dubbelklicka** p√• "PresentationSetup.ps1"
3. **V√§nta** medan systemet konfigureras
4. **PowerPoint √∂ppnas** automatiskt
5. **Tryck F5** f√∂r att starta presentation

## Om du har en f√§rdig presentation:
1. **Dra** din PowerPoint-fil till scriptet
2. **Eller** k√∂r scriptet och √∂ppna filen manuellt

## Presentation-kontroller:
- **F5** = Starta presentation
- **Piltangenter** = N√§sta/f√∂reg√•ende slide
- **ESC** = Avsluta presentation
- **B** = Svart sk√§rm (f√∂r paus)

## Fels√∂kning:
- **Projektorn visar inte**: Kontrollera kabel och tryck Windows+P
- **PowerPoint startar inte**: Kontrollera att Office √§r installerat
- **Fel storlek p√• text**: Justera i PowerPoint innan presentation
      `,
      prerequisites: [
        'Microsoft PowerPoint installerat',
        'Projektor ansluten till datorn',
        'Windows 10 eller senare'
      ],
      troubleshooting: [
        'Om projektorn inte hittas: Kontrollera kablar och tryck Windows+P f√∂r sk√§rminst√§llningar',
        'Om PowerPoint inte startar: Kontrollera Office-installation',
        'Om text √§r f√∂r liten: √ñka fontstorlek i PowerPoint',
        'Om presentation inte visas p√• projektor: V√§lj "Ut√∂ka" i sk√§rminst√§llningar'
      ]
    };
  }

  /**
   * System configuration f√∂r kyrkteknik
   */
  private generateSystemConfiguration(
    request: ChurchAutomationRequest,
    seniorProfile: SeniorUserProfile
  ): PowerShellScript {

    const content = `
# Kyrkteknik System Konfiguration
# Automatisk setup av Windows f√∂r kyrkteknik

Write-Host "‚öôÔ∏è KYRKTEKNIK SYSTEM KONFIGURATION" -ForegroundColor Cyan
Write-Host "Konfigurerar Windows f√∂r optimal kyrkteknik..." -ForegroundColor Yellow

# Funktion f√∂r att optimera f√∂r kyrkteknik
function Optimize-ChurchComputer {
    Write-Host "üñ•Ô∏è Optimerar dator f√∂r kyrkteknik..." -ForegroundColor Cyan
    
    try {
        # Inaktivera Windows Update under tj√§nster
        Write-Host "‚è∏Ô∏è Pausar Windows Update under tj√§nster..." -ForegroundColor Yellow
        $UpdateService = Get-Service -Name "wuauserv" -ErrorAction SilentlyContinue
        if ($UpdateService) {
            Stop-Service -Name "wuauserv" -Force -ErrorAction SilentlyContinue
            Set-Service -Name "wuauserv" -StartupType Manual
        }
        
        # Inaktivera sk√§rmsl√§ckare
        Write-Host "üí° Inaktiverar sk√§rmsl√§ckare..." -ForegroundColor Yellow
        Set-ItemProperty -Path "HKCU:\\Control Panel\\Desktop" -Name "ScreenSaveActive" -Value "0"
        
        # Inaktivera vilol√§ge
        Write-Host "‚ö° Inaktiverar vilol√§ge..." -ForegroundColor Yellow
        powercfg -change -standby-timeout-ac 0
        powercfg -change -standby-timeout-dc 0
        powercfg -change -hibernate-timeout-ac 0
        powercfg -change -hibernate-timeout-dc 0
        
        # S√§tt h√∂g prestanda
        Write-Host "üöÄ S√§tter h√∂g prestanda..." -ForegroundColor Yellow
        powercfg -setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c
        
        # Inaktivera notifikationer
        Write-Host "üîï Inaktiverar st√∂rande notifikationer..." -ForegroundColor Yellow
        Set-ItemProperty -Path "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Notifications\\Settings" -Name "NOC_GLOBAL_SETTING_ALLOW_NOTIFICATION_SOUND" -Value 0
        
        Write-Host "‚úÖ Systemoptimering klar!" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Host "‚ùå Fel vid systemoptimering: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Funktion f√∂r att installera n√∂dv√§ndig programvara
function Install-ChurchSoftware {
    Write-Host "üì¶ Kontrollerar n√∂dv√§ndig programvara..." -ForegroundColor Cyan
    
    $RequiredSoftware = @{
        "Zoom" = @{
            Path = "$env:APPDATA\\Zoom\\bin\\Zoom.exe"
            DownloadURL = "https://zoom.us/client/latest/ZoomInstaller.exe"
            Description = "Zoom f√∂r hybrid-tj√§nster"
        }
        "PowerPoint" = @{
            Path = "$env:PROGRAMFILES\\Microsoft Office\\root\\Office16\\POWERPNT.EXE"
            DownloadURL = $null
            Description = "Microsoft PowerPoint f√∂r presentationer"
        }
        "VLC" = @{
            Path = "$env:PROGRAMFILES\\VideoLAN\\VLC\\vlc.exe"
            DownloadURL = "https://get.videolan.org/vlc/last/win64/vlc-win64.exe"
            Description = "VLC f√∂r media-uppspelning"
        }
    }
    
    foreach ($Software in $RequiredSoftware.GetEnumerator()) {
        $Name = $Software.Key
        $Info = $Software.Value
        
        if (Test-Path $Info.Path) {
            Write-Host "‚úÖ $Name: Installerat" -ForegroundColor Green
        } else {
            Write-Host "‚ùå $Name: Saknas" -ForegroundColor Red
            Write-Host "üí° $($Info.Description)" -ForegroundColor Yellow
            
            if ($Info.DownloadURL) {
                Write-Host "üîó Ladda ner fr√•n: $($Info.DownloadURL)" -ForegroundColor Cyan
            }
        }
    }
}

# Funktion f√∂r att konfigurera n√§tverk f√∂r kyrkteknik
function Set-ChurchNetwork {
    Write-Host "üåê Konfigurerar n√§tverk f√∂r kyrkteknik..." -ForegroundColor Cyan
    
    try {
        # Kontrollera n√§tverksanslutning
        $NetworkAdapters = Get-NetAdapter | Where-Object {$_.Status -eq "Up"}
        
        if ($NetworkAdapters.Count -gt 0) {
            Write-Host "‚úÖ N√§tverksanslutning aktiv" -ForegroundColor Green
            
            # Testa anslutning till vanliga kyrkteknik-enheter
            $TestIPs = @("192.168.1.100", "192.168.1.101", "192.168.1.102") # Tesira, kameror, etc.
            
            foreach ($IP in $TestIPs) {
                $PingResult = Test-Connection -ComputerName $IP -Count 1 -Quiet
                if ($PingResult) {
                    Write-Host "‚úÖ Kyrkteknik-enhet p√• $IP: Tillg√§nglig" -ForegroundColor Green
                } else {
                    Write-Host "‚ö†Ô∏è Kyrkteknik-enhet p√• $IP: Inte tillg√§nglig" -ForegroundColor Yellow
                }
            }
        } else {
            Write-Host "‚ùå Ingen n√§tverksanslutning hittad" -ForegroundColor Red
        }
        
        return $true
    }
    catch {
        Write-Host "‚ùå Fel vid n√§tverkskonfiguration: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Funktion f√∂r att skapa genv√§gar f√∂r kyrkteknik
function New-ChurchShortcuts {
    Write-Host "üîó Skapar genv√§gar f√∂r kyrkteknik..." -ForegroundColor Cyan
    
    try {
        $Desktop = [Environment]::GetFolderPath("Desktop")
        $WshShell = New-Object -ComObject WScript.Shell
        
        # Genv√§g f√∂r Zoom
        if (Test-Path "$env:APPDATA\\Zoom\\bin\\Zoom.exe") {
            $ZoomShortcut = $WshShell.CreateShortcut("$Desktop\\Kyrktj√§nst Zoom.lnk")
            $ZoomShortcut.TargetPath = "$env:APPDATA\\Zoom\\bin\\Zoom.exe"
            $ZoomShortcut.Description = "Starta Zoom f√∂r kyrktj√§nst"
            $ZoomShortcut.Save()
            Write-Host "‚úÖ Zoom-genv√§g skapad" -ForegroundColor Green
        }
        
        # Genv√§g f√∂r PowerPoint
        $PowerPointPath = "$env:PROGRAMFILES\\Microsoft Office\\root\\Office16\\POWERPNT.EXE"
        if (Test-Path $PowerPointPath) {
            $PPTShortcut = $WshShell.CreateShortcut("$Desktop\\Kyrktj√§nst Presentation.lnk")
            $PPTShortcut.TargetPath = $PowerPointPath
            $PPTShortcut.Description = "PowerPoint f√∂r kyrktj√§nst"
            $PPTShortcut.Save()
            Write-Host "‚úÖ PowerPoint-genv√§g skapad" -ForegroundColor Green
        }
        
        # Genv√§g f√∂r kyrkteknik-scripts
        $ScriptPath = $PSScriptRoot
        if ($ScriptPath) {
            $ScriptShortcut = $WshShell.CreateShortcut("$Desktop\\Kyrkteknik Automation.lnk")
            $ScriptShortcut.TargetPath = "powershell.exe"
            $ScriptShortcut.Arguments = "-ExecutionPolicy Bypass -File `"$ScriptPath\\Kyrktj√§nstSetup.ps1`""
            $ScriptShortcut.Description = "Automatisk kyrkteknik setup"
            $ScriptShortcut.Save()
            Write-Host "‚úÖ Automation-genv√§g skapad" -ForegroundColor Green
        }
        
        return $true
    }
    catch {
        Write-Host "‚ùå Fel vid skapande av genv√§gar: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Huvudlogik
Write-Host "=" * 60 -ForegroundColor Cyan
Write-Host "‚öôÔ∏è KYRKTEKNIK SYSTEM KONFIGURATION STARTAR" -ForegroundColor Cyan
Write-Host "=" * 60 -ForegroundColor Cyan

# Steg 1: Systemoptimering
Write-Host "\\n1Ô∏è‚É£ Optimerar system..." -ForegroundColor Yellow
$OptimizeSuccess = Optimize-ChurchComputer

# Steg 2: Kontrollera programvara
Write-Host "\\n2Ô∏è‚É£ Kontrollerar programvara..." -ForegroundColor Yellow
Install-ChurchSoftware

# Steg 3: N√§tverkskonfiguration
Write-Host "\\n3Ô∏è‚É£ Konfigurerar n√§tverk..." -ForegroundColor Yellow
$NetworkSuccess = Set-ChurchNetwork

# Steg 4: Skapa genv√§gar
Write-Host "\\n4Ô∏è‚É£ Skapar genv√§gar..." -ForegroundColor Yellow
$ShortcutSuccess = New-ChurchShortcuts

# Sammanfattning
Write-Host "\\n" + "=" * 60 -ForegroundColor Cyan
Write-Host "üìä SYSTEM KONFIGURATION KOMPLETT" -ForegroundColor Cyan
Write-Host "=" * 60 -ForegroundColor Cyan

Write-Host "‚úÖ Kyrkteknik-datorn √§r konfigurerad!" -ForegroundColor Green
Write-Host "\\nüìã Vad som gjorts:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Systemet optimerat f√∂r kyrkteknik" -ForegroundColor White
Write-Host "   ‚Ä¢ St√∂rande funktioner inaktiverade" -ForegroundColor White
Write-Host "   ‚Ä¢ N√§tverksanslutning kontrollerad" -ForegroundColor White
Write-Host "   ‚Ä¢ Genv√§gar skapade p√• skrivbordet" -ForegroundColor White

Write-Host "\\nüí° N√§sta steg:" -ForegroundColor Cyan
Write-Host "   1. Starta om datorn f√∂r att aktivera alla √§ndringar" -ForegroundColor White
Write-Host "   2. Testa alla genv√§gar p√• skrivbordet" -ForegroundColor White
Write-Host "   3. K√∂r kyrktj√§nst-setup innan f√∂rsta tj√§nst" -ForegroundColor White

Write-Host "\\nüÜò Support:" -ForegroundColor Red
Write-Host "   Om n√•got inte fungerar, kontakta teknikansvarig" -ForegroundColor White

Write-Host "\\nTryck Enter f√∂r att avsluta..." -ForegroundColor Cyan
Read-Host
`;

    return {
      filename: 'SystemKonfiguration.ps1',
      content,
      description: 'Komplett systemkonfiguration f√∂r kyrkteknik-datorer',
      seniorInstructions: `
# ‚öôÔ∏è System Konfiguration - Instruktioner

## Detta script g√∂r:
- **Optimerar** datorn f√∂r kyrkteknik
- **Inaktiverar** st√∂rande funktioner
- **Kontrollerar** att r√§tt program finns
- **Skapar** genv√§gar p√• skrivbordet
- **Testar** n√§tverksanslutningar

## S√• h√§r k√∂r du det:
1. **H√∂gerklicka** p√• scriptet
2. **V√§lj** "K√∂r med PowerShell"
3. **V√§nta** medan konfigurationen k√∂rs
4. **Starta om** datorn n√§r det √§r klart

## Efter konfiguration:
- **Nya genv√§gar** p√• skrivbordet
- **Optimerade** inst√§llningar f√∂r kyrkteknik
- **Testade** n√§tverksanslutningar
- **Redo** f√∂r kyrktj√§nster

## ‚ö†Ô∏è Viktigt:
- **K√∂r endast** p√• kyrkteknik-datorer
- **Starta om** datorn efter konfiguration
- **Testa** alla funktioner innan f√∂rsta tj√§nst
      `,
      prerequisites: [
        'Windows 10 eller senare',
        'Administrat√∂rsbeh√∂righeter',
        'Internetanslutning f√∂r programvarukontroll'
      ],
      troubleshooting: [
        'Om script inte kan k√∂ras: H√∂gerklicka ‚Üí "K√∂r som administrat√∂r"',
        'Om optimering misslyckas: Kontrollera att du har administrat√∂rsbeh√∂righeter',
        'Om genv√§gar inte skapas: Kontrollera att programmen √§r installerade',
        'Om n√§tverkstest misslyckas: Kontrollera n√§tverkskablar och inst√§llningar'
      ]
    };
  }
}

export default ChurchPowerShellGenerator;