// MASTER PLAN 2.0: User Plan Service
// STATUS: F√∂rberedelser f√∂r Framtida Anv√§ndarplan-Funktionalitet
// INTEGRATION: Senior Cockpit ‚Üí Communication Bridge ‚Üí Core Agent

import { 
  SeniorSafeUserPlan, 
  SeniorSafeGoal,
  SeniorDataValidator,
  SeniorSafeString,
  SeniorSafeNumber
} from '../types/SeniorSafeDataModels';

/**
 * Service f√∂r att hantera anv√§ndarplaner och AI-driven requirements generation
 * F√∂rberedd f√∂r framtida integration med teknisk ledare approval workflow
 */
export class UserPlanService {
  private currentPlan: SeniorSafeUserPlan | null = null;
  private planHistory: SeniorSafeUserPlan[] = [];

  /**
   * Skapar en ny anv√§ndarplan baserat p√• senior-input
   */
  async createUserPlan(seniorInput: {
    projectIdea: string;
    goals: string[];
    timeframe?: string;
    priority?: 'low' | 'medium' | 'high';
  }): Promise<SeniorSafeUserPlan> {
    
    // Validera och s√§kra input fr√•n senior
    const safeProjectIdea = SeniorDataValidator.validateSeniorSafeString(
      this.sanitizeSeniorInput(seniorInput.projectIdea)
    );
    
    const safeGoals = seniorInput.goals.map(goal => 
      SeniorDataValidator.validateSeniorSafeString(
        this.sanitizeSeniorInput(goal)
      )
    );

    // Skapa anv√§ndarplan
    const userPlan: SeniorSafeUserPlan = {
      planName: safeProjectIdea,
      description: SeniorDataValidator.validateSeniorSafeString(
        `Ett sp√§nnande projekt: ${safeProjectIdea}`
      ),
      goals: this.createSeniorSafeGoals(safeGoals),
      overallProgress: SeniorDataValidator.validateSeniorSafeNumber(0),
      estimatedTimeframe: SeniorDataValidator.validateSeniorSafeString(
        seniorInput.timeframe || "Inom n√•gra m√•nader"
      ),
      motivationalQuote: this.generateMotivationalQuote(),
      nextMilestone: SeniorDataValidator.validateSeniorSafeString(
        "B√∂rja med att planera f√∂rsta steget"
      )
    };

    // S√§tt som aktuell plan
    this.currentPlan = userPlan;
    
    // Spara i historik
    this.planHistory.push(userPlan);

    return userPlan;
  }

  /**
   * Genererar AI-drivna requirements fr√•n senior-input
   * F√∂rberedd f√∂r framtida integration med Core Agent
   */
  async generateRequirementsFromSeniorInput(
    seniorInput: string
  ): Promise<{
    seniorFriendlyRequirements: SeniorSafeString[];
    technicalRequirements: any[]; // F√∂r framtida teknisk ledare review
    confidence: SeniorSafeNumber;
  }> {
    
    const sanitizedInput = this.sanitizeSeniorInput(seniorInput);
    
    // Simulerad AI-analys (f√∂rberedd f√∂r riktig AI-integration)
    const seniorRequirements = this.extractSeniorFriendlyRequirements(sanitizedInput);
    const technicalRequirements = this.prepareTechnicalRequirements(sanitizedInput);
    
    return {
      seniorFriendlyRequirements: seniorRequirements.map(req => 
        SeniorDataValidator.validateSeniorSafeString(req)
      ),
      technicalRequirements, // Dold fr√•n senior, f√∂r teknisk ledare
      confidence: SeniorDataValidator.validateSeniorSafeNumber(85)
    };
  }

  /**
   * F√∂rbereder bidirektional kommunikation (senior input ‚Üí teknisk implementation)
   */
  async processSeniorFeedback(feedback: {
    planId: string;
    changes: string[];
    satisfaction: 'low' | 'medium' | 'high';
    additionalRequests?: string[];
  }): Promise<{
    updatedPlan: SeniorSafeUserPlan;
    technicalChanges: any[]; // F√∂r Core Agent
    requiresApproval: boolean;
  }> {
    
    if (!this.currentPlan) {
      throw new Error('Ingen aktiv plan att uppdatera');
    }

    // Bearbeta senior-feedback
    const processedChanges = feedback.changes.map(change => 
      this.sanitizeSeniorInput(change)
    );

    // Uppdatera plan baserat p√• feedback
    const updatedPlan = await this.updatePlanFromFeedback(
      this.currentPlan,
      processedChanges,
      feedback.satisfaction
    );

    // F√∂rbered tekniska √§ndringar f√∂r Core Agent
    const technicalChanges = this.translateToTechnicalChanges(processedChanges);

    // Avg√∂r om teknisk ledare approval kr√§vs
    const requiresApproval = this.assessApprovalRequirement(
      feedback.satisfaction,
      technicalChanges
    );

    return {
      updatedPlan,
      technicalChanges,
      requiresApproval
    };
  }

  /**
   * F√∂rbereder teknisk ledare approval workflow
   */
  async prepareForTechnicalApproval(
    userPlan: SeniorSafeUserPlan,
    technicalRequirements: any[]
  ): Promise<{
    approvalRequest: any; // F√∂r teknisk ledare
    seniorSummary: SeniorSafeString; // F√∂r senior
    estimatedComplexity: 'low' | 'medium' | 'high';
  }> {
    
    const approvalRequest = {
      planId: Date.now().toString(),
      seniorInput: userPlan.description,
      technicalRequirements,
      estimatedEffort: this.estimateEffort(technicalRequirements),
      riskAssessment: this.assessRisks(technicalRequirements),
      recommendedApproach: this.recommendApproach(technicalRequirements)
    };

    const seniorSummary = SeniorDataValidator.validateSeniorSafeString(
      `Vi granskar ditt projekt f√∂r att s√§kerst√§lla att allt blir perfekt. ` +
      `Detta tar vanligtvis n√•gra dagar, och sedan kan vi b√∂rja bygga!`
    );

    const complexity = this.assessComplexity(technicalRequirements);

    return {
      approvalRequest,
      seniorSummary,
      estimatedComplexity: complexity
    };
  }

  /**
   * H√§mtar aktuell anv√§ndarplan
   */
  getCurrentPlan(): SeniorSafeUserPlan | null {
    return this.currentPlan;
  }

  /**
   * H√§mtar planhistorik
   */
  getPlanHistory(): SeniorSafeUserPlan[] {
    return [...this.planHistory];
  }

  /**
   * Uppdaterar framsteg f√∂r aktuell plan
   */
  updateProgress(goalId: string, progress: number): void {
    if (!this.currentPlan) return;

    const goal = this.currentPlan.goals.find(g => g.id === goalId);
    if (goal) {
      goal.progress = SeniorDataValidator.validateSeniorSafeNumber(
        Math.min(100, Math.max(0, progress))
      );
      
      // Uppdatera √∂vergripande framsteg
      const totalProgress = this.currentPlan.goals.reduce(
        (sum, g) => sum + g.progress, 0
      ) / this.currentPlan.goals.length;
      
      this.currentPlan.overallProgress = SeniorDataValidator.validateSeniorSafeNumber(
        Math.round(totalProgress)
      );
    }
  }

  // Private helper methods

  private sanitizeSeniorInput(input: string): string {
    // Ta bort potentiellt teknisk jargong och rensa input
    return input
      .replace(/\b(api|database|server|git|code|programming)\b/gi, '')
      .replace(/[<>{}]/g, '') // Ta bort potentiellt farliga tecken
      .trim();
  }

  private createSeniorSafeGoals(goalDescriptions: SeniorSafeString[]): SeniorSafeGoal[] {
    return goalDescriptions.map((description, index) => ({
      id: `goal-${Date.now()}-${index}`,
      title: description,
      description: SeniorDataValidator.validateSeniorSafeString(
        `Arbeta med: ${description}`
      ),
      priority: 'medium' as const,
      status: 'planning' as const,
      icon: 'üéØ',
      color: '#2196F3',
      progress: SeniorDataValidator.validateSeniorSafeNumber(0),
      completedSteps: [],
      nextSteps: [
        SeniorDataValidator.validateSeniorSafeString("Planera f√∂rsta steget"),
        SeniorDataValidator.validateSeniorSafeString("B√∂rja arbeta p√• m√•let")
      ]
    }));
  }

  private generateMotivationalQuote(): SeniorSafeString {
    const quotes = [
      "Varje stor resa b√∂rjar med ett enda steg",
      "Dina id√©er har kraften att f√∂r√§ndra v√§rlden",
      "Tillsammans kan vi g√∂ra det om√∂jliga m√∂jligt",
      "Din kreativitet √§r din superkraft",
      "Framg√•ng √§r summan av sm√• anstr√§ngningar som upprepas dag efter dag"
    ];
    
    const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
    return SeniorDataValidator.validateSeniorSafeString(randomQuote);
  }

  private extractSeniorFriendlyRequirements(input: string): string[] {
    // Simulerad AI-analys f√∂r att extrahera krav
    const keywords = input.toLowerCase().split(' ');
    const requirements = [];

    if (keywords.includes('familj') || keywords.includes('sl√§kt')) {
      requirements.push("Skapa n√•got som hj√§lper familjen att h√•lla kontakten");
    }
    
    if (keywords.includes('kyrka') || keywords.includes('f√∂rsamling')) {
      requirements.push("Bygga n√•got f√∂r kyrkgemenskapen");
    }
    
    if (keywords.includes('hj√§lp') || keywords.includes('st√∂d')) {
      requirements.push("Skapa ett hj√§lpsamt verktyg");
    }

    if (requirements.length === 0) {
      requirements.push("Skapa n√•got anv√§ndbart och meningsfullt");
    }

    return requirements;
  }

  private prepareTechnicalRequirements(input: string): any[] {
    // F√∂rberedd f√∂r framtida teknisk analys
    return [
      {
        type: 'functional',
        description: `Technical implementation for: ${input}`,
        complexity: 'medium',
        estimatedHours: 40
      }
    ];
  }

  private async updatePlanFromFeedback(
    currentPlan: SeniorSafeUserPlan,
    changes: string[],
    satisfaction: 'low' | 'medium' | 'high'
  ): Promise<SeniorSafeUserPlan> {
    
    const updatedPlan = { ...currentPlan };
    
    // Uppdatera baserat p√• satisfaction level
    if (satisfaction === 'low') {
      updatedPlan.motivationalQuote = SeniorDataValidator.validateSeniorSafeString(
        "Vi lyssnar p√• din feedback och g√∂r det b√§ttre tillsammans"
      );
    } else if (satisfaction === 'high') {
      updatedPlan.motivationalQuote = SeniorDataValidator.validateSeniorSafeString(
        "Fantastiskt! Du √§r p√• r√§tt v√§g mot n√•got underbart"
      );
    }

    return updatedPlan;
  }

  private translateToTechnicalChanges(changes: string[]): any[] {
    // √ñvers√§tt senior-feedback till tekniska √§ndringar
    return changes.map(change => ({
      type: 'requirement_change',
      seniorInput: change,
      technicalImplication: `Implement: ${change}`,
      priority: 'medium'
    }));
  }

  private assessApprovalRequirement(
    satisfaction: 'low' | 'medium' | 'high',
    technicalChanges: any[]
  ): boolean {
    // Kr√§v approval f√∂r stora √§ndringar eller l√•g satisfaction
    return satisfaction === 'low' || technicalChanges.length > 3;
  }

  private estimateEffort(requirements: any[]): 'low' | 'medium' | 'high' {
    const totalComplexity = requirements.reduce((sum, req) => {
      switch (req.complexity) {
        case 'low': return sum + 1;
        case 'medium': return sum + 2;
        case 'high': return sum + 3;
        default: return sum + 2;
      }
    }, 0);

    if (totalComplexity <= 3) return 'low';
    if (totalComplexity <= 6) return 'medium';
    return 'high';
  }

  private assessRisks(requirements: any[]): string[] {
    // Simulerad riskbed√∂mning
    return [
      'Standard implementation risks',
      'User experience considerations',
      'Technical complexity assessment needed'
    ];
  }

  private recommendApproach(requirements: any[]): string {
    return 'Incremental development with regular senior feedback';
  }

  private assessComplexity(requirements: any[]): 'low' | 'medium' | 'high' {
    return this.estimateEffort(requirements);
  }
}