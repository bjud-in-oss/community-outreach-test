// MASTER PLAN 2.0: Progress Aggregator
// STATUS: Jules Senior Cockpit Implementation - Automatiska Progress-Sammanfattningar
// INTEGRATION: Communication Bridge â†’ Senior Cockpit

import { WeeklyDigest, ProgressSummary } from '../types/SeniorCockpitTypes';
import { SeniorFriendlyUpdate } from '../types/SeniorSafeDataModels';
import { SeniorTranslator } from '../../../communication-bridge/translation/SeniorTranslator';

/**
 * Aggregerar tekniska framsteg till senior-vÃ¤nliga veckovisa sammanfattningar
 * Fokuserar pÃ¥ uppmuntrande och positiva formuleringar
 */
export class ProgressAggregator {
  private translator: SeniorTranslator;
  private weeklyEvents: SeniorFriendlyUpdate[] = [];

  constructor() {
    this.translator = new SeniorTranslator();
  }

  /**
   * LÃ¤gger till en teknisk hÃ¤ndelse som ska inkluderas i nÃ¤sta veckosammanfattning
   */
  addTechnicalEvent(event: any): void {
    const seniorUpdate = this.translator.translateToSeniorUpdate(event);
    this.weeklyEvents.push(seniorUpdate);
  }

  /**
   * Genererar en veckovis digest med uppmuntrande sprÃ¥k
   */
  generateWeeklyDigest(): WeeklyDigest {
    const completedTasks = this.weeklyEvents.filter(e => e.type === 'success');
    const ongoingWork = this.weeklyEvents.filter(e => e.type === 'progress');
    
    return {
      weekOf: new Date().toISOString().split('T')[0],
      accomplishments: this.createAccomplishmentSummary(completedTasks),
      nextWeekFocus: this.createNextWeekFocus(ongoingWork),
      encouragingMessage: this.generateEncouragingMessage(completedTasks.length),
      overallProgress: this.calculateOverallProgress()
    };
  }

  /**
   * Skapar uppmuntrande sammanfattning av veckans prestationer
   */
  private createAccomplishmentSummary(completedTasks: SeniorFriendlyUpdate[]): string[] {
    if (completedTasks.length === 0) {
      return ["Vi har arbetat hÃ¥rt med att fÃ¶rbereda nÃ¤sta steg i ditt projekt"];
    }

    const accomplishments = completedTasks.map(task => {
      return `âœ… ${task.message}`;
    });

    // LÃ¤gg till uppmuntrande inledning
    accomplishments.unshift("Denna vecka slutfÃ¶rde vi:");
    
    return accomplishments;
  }

  /**
   * Skapar fokusomrÃ¥den fÃ¶r nÃ¤sta vecka
   */
  private createNextWeekFocus(ongoingWork: SeniorFriendlyUpdate[]): string[] {
    const focus = ["NÃ¤sta vecka fokuserar vi pÃ¥:"];
    
    if (ongoingWork.length === 0) {
      focus.push("ðŸŽ¯ Att planera nÃ¤sta spÃ¤nnande steg i ditt projekt");
    } else {
      ongoingWork.slice(0, 3).forEach(work => {
        focus.push(`ðŸŽ¯ ${work.message}`);
      });
    }

    return focus;
  }

  /**
   * Genererar kontextuellt uppmuntrande meddelande
   */
  private generateEncouragingMessage(completedCount: number): string {
    const messages = [
      "Du gÃ¶r fantastiska framsteg! Varje steg fÃ¶r dig nÃ¤rmare ditt mÃ¥l.",
      "Bra jobbat! Ditt projekt vÃ¤xer och utvecklas precis som det ska.",
      "Vi Ã¤r stolta Ã¶ver hur lÃ¥ngt du har kommit. FortsÃ¤tt sÃ¥ hÃ¤r!",
      "Ditt engagemang och tÃ¥lamod ger verkligen resultat.",
      "Varje dag blir ditt projekt lite mer komplett. Fantastiskt arbete!"
    ];

    if (completedCount === 0) {
      return "Ã„ven om vi inte ser stora fÃ¶rÃ¤ndringar denna vecka, arbetar vi stÃ¤ndigt pÃ¥ att gÃ¶ra ditt projekt bÃ¤ttre.";
    }

    return messages[Math.floor(Math.random() * messages.length)];
  }

  /**
   * BerÃ¤knar Ã¶vergripande framsteg i procent
   */
  private calculateOverallProgress(): number {
    // Simulerad berÃ¤kning baserad pÃ¥ antal slutfÃ¶rda uppgifter
    const totalEvents = this.weeklyEvents.length;
    const completedEvents = this.weeklyEvents.filter(e => e.type === 'success').length;
    
    if (totalEvents === 0) return 15; // GrundlÃ¤ggande framsteg
    
    const baseProgress = 15; // StartvÃ¤rde
    const progressIncrement = Math.min(75, (completedEvents / totalEvents) * 85);
    
    return Math.round(baseProgress + progressIncrement);
  }

  /**
   * Skapar mÃ¥nadssammanfattning fÃ¶r stÃ¶rre milstones
   */
  generateMonthlyProgress(): ProgressSummary {
    return {
      period: 'month',
      startDate: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString(),
      endDate: new Date().toISOString(),
      majorAccomplishments: this.getMajorAccomplishments(),
      upcomingMilestones: this.getUpcomingMilestones(),
      celebrationMessage: this.generateCelebrationMessage()
    };
  }

  /**
   * Identifierar stÃ¶rre prestationer fÃ¶r mÃ¥nadssammanfattning
   */
  private getMajorAccomplishments(): string[] {
    return [
      "ðŸŽ‰ Ditt projekt har fÃ¥tt en solid grund att bygga vidare pÃ¥",
      "ðŸŽ‰ Vi har skapat sÃ¤kra system som skyddar din information",
      "ðŸŽ‰ Alla grundlÃ¤ggande funktioner Ã¤r nu pÃ¥ plats och fungerar"
    ];
  }

  /**
   * FÃ¶reslÃ¥r kommande milstones
   */
  private getUpcomingMilestones(): string[] {
    return [
      "ðŸŽ¯ NÃ¤sta mÃ¥nad kommer vi att gÃ¶ra ditt projekt Ã¤nnu enklare att anvÃ¤nda",
      "ðŸŽ¯ Vi planerar att lÃ¤gga till fler anvÃ¤ndbara funktioner",
      "ðŸŽ¯ Ditt projekt kommer att bli redo fÃ¶r dina fÃ¶rsta riktiga anvÃ¤ndare"
    ];
  }

  /**
   * Skapar celebrationsmeddelande fÃ¶r mÃ¥nadssammanfattning
   */
  private generateCelebrationMessage(): string {
    return "Du har gjort otroliga framsteg denna mÃ¥nad! Ditt projekt vÃ¤xer frÃ¥n en idÃ© till verklighet, och vi Ã¤r sÃ¥ glada att fÃ¥ vara en del av denna resa tillsammans med dig.";
  }

  /**
   * Rensar gamla hÃ¤ndelser (kÃ¶rs automatiskt)
   */
  clearOldEvents(): void {
    const oneWeekAgo = new Date();
    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
    
    this.weeklyEvents = this.weeklyEvents.filter(event => 
      new Date(event.timestamp) > oneWeekAgo
    );
  }
}