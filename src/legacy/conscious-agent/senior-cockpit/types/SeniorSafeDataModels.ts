// MASTER PLAN 2.0: Senior-S√§kra Datamodeller
// STATUS: S√§kra Datastrukturer utan Teknisk Exponering
// INTEGRATION: Communication Bridge ‚Üí Senior Cockpit

/**
 * Senior-s√§kra datamodeller som garanterar att ingen teknisk information
 * l√§cker igenom till Senior Cockpit-gr√§nssnittet
 */

// Grundl√§ggande senior-s√§kra typer
export type SeniorSafeString = string & { __seniorSafe: true };
export type SeniorSafeNumber = number & { __seniorSafe: true };
export type SeniorSafeDate = string & { __seniorSafeDate: true }; // ISO date string

/**
 * Huvuddatastruktur f√∂r senior-v√§nliga uppdateringar
 */
export interface SeniorFriendlyUpdate {
  id: string;
  timestamp: SeniorSafeDate;
  type: 'success' | 'progress' | 'info' | 'celebration';
  
  // Senior-v√§nliga meddelanden (inga tekniska termer)
  title: SeniorSafeString;
  message: SeniorSafeString;
  encouragingNote?: SeniorSafeString;
  
  // Visuella element
  icon: '‚úÖ' | 'üéØ' | '‚ÑπÔ∏è' | 'üéâ' | 'üíù';
  priority: 'low' | 'medium' | 'high';
  
  // Metadata (dold fr√•n UI men tillg√§nglig f√∂r logik)
  category: 'project-progress' | 'system-health' | 'user-achievement';
  relatedPhase?: 'grundl√§ggande' | 'utveckling' | 'f√∂rb√§ttring' | 'perfektion';
}

/**
 * Projekt√∂versikt utan tekniska detaljer
 */
export interface SeniorSafeProjectOverview {
  projectName: SeniorSafeString;
  description: SeniorSafeString;
  
  // Framsteg i senior-v√§nliga termer
  currentPhase: 'grundl√§ggande' | 'utveckling' | 'f√∂rb√§ttring' | 'perfektion';
  phaseDescription: SeniorSafeString;
  overallProgress: SeniorSafeNumber; // 0-100
  
  // Uppmuntrande meddelanden
  nextSteps: SeniorSafeString[];
  recentAccomplishments: SeniorSafeString[];
  motivationalMessage: SeniorSafeString;
  
  // Tidslinjer utan tekniska detaljer
  estimatedCompletion: SeniorSafeString; // "Inom n√•gra veckor"
  lastUpdate: SeniorSafeDate;
}

/**
 * Fas-progression utan tekniska termer
 */
export interface SeniorSafePhaseProg {
  phases: SeniorSafePhase[];
  currentPhaseIndex: SeniorSafeNumber;
  overallProgress: SeniorSafeNumber;
  celebrationMoments: SeniorSafeCelebration[];
}

export interface SeniorSafePhase {
  name: 'grundl√§ggande' | 'utveckling' | 'f√∂rb√§ttring' | 'perfektion';
  displayName: SeniorSafeString;
  description: SeniorSafeString;
  progress: SeniorSafeNumber; // 0-100
  status: 'completed' | 'current' | 'upcoming';
  
  // Visuella element
  icon: 'üèóÔ∏è' | '‚öôÔ∏è' | '‚ú®' | 'üéØ';
  color: '#4CAF50' | '#2196F3' | '#FF9800' | '#9C27B0';
  
  // Milstones utan tekniska detaljer
  milestones: SeniorSafeMilestone[];
}

export interface SeniorSafeMilestone {
  title: SeniorSafeString;
  description: SeniorSafeString;
  completed: boolean;
  completedDate?: SeniorSafeDate;
  celebrationMessage?: SeniorSafeString;
}

/**
 * Celebrationsmoment f√∂r att uppmuntra anv√§ndaren
 */
export interface SeniorSafeCelebration {
  id: string;
  title: SeniorSafeString;
  message: SeniorSafeString;
  achievementDate: SeniorSafeDate;
  icon: 'üéâ' | 'üèÜ' | '‚≠ê' | 'üíù' | 'üéØ';
  importance: 'minor' | 'major' | 'milestone';
}

/**
 * Notifikationer utan teknisk jargong
 */
export interface SeniorSafeNotification {
  id: string;
  type: 'info' | 'success' | 'encouragement' | 'celebration';
  
  // Senior-v√§nligt inneh√•ll
  title: SeniorSafeString;
  message: SeniorSafeString;
  actionText?: SeniorSafeString;
  
  // Visuell presentation
  icon: string;
  color: string;
  priority: 'low' | 'medium' | 'high';
  
  // Timing
  timestamp: SeniorSafeDate;
  expiresAt?: SeniorSafeDate;
  dismissed: boolean;
}

/**
 * Felmeddelanden i senior-v√§nlig form
 */
export interface SeniorSafeError {
  id: string;
  title: SeniorSafeString; // "Ett litet problem uppstod"
  message: SeniorSafeString; // "Vi arbetar p√• att l√∂sa det"
  suggestion?: SeniorSafeString; // "Du kan f√∂rs√∂ka igen om en stund"
  
  // Uppmuntrande element
  reassurance: SeniorSafeString; // "Ditt arbete √§r s√§kert"
  supportMessage: SeniorSafeString; // "Vi hj√§lper dig g√§rna"
  
  // Metadata
  severity: 'minor' | 'moderate' | 'major';
  timestamp: SeniorSafeDate;
  resolved: boolean;
}

/**
 * Anv√§ndarplan-data (f√∂rberedelse f√∂r framtida funktionalitet)
 */
export interface SeniorSafeUserPlan {
  planName: SeniorSafeString;
  description: SeniorSafeString;
  
  // M√•l utan tekniska detaljer
  goals: SeniorSafeGoal[];
  currentGoal?: SeniorSafeGoal;
  
  // Framsteg
  overallProgress: SeniorSafeNumber;
  estimatedTimeframe: SeniorSafeString;
  
  // Uppmuntran
  motivationalQuote: SeniorSafeString;
  nextMilestone: SeniorSafeString;
}

export interface SeniorSafeGoal {
  id: string;
  title: SeniorSafeString;
  description: SeniorSafeString;
  priority: 'low' | 'medium' | 'high';
  status: 'planning' | 'in-progress' | 'completed';
  
  // Visuell representation
  icon: string;
  color: string;
  
  // Framsteg
  progress: SeniorSafeNumber;
  completedSteps: SeniorSafeString[];
  nextSteps: SeniorSafeString[];
}

/**
 * Validering f√∂r att s√§kerst√§lla senior-s√§kerhet
 */
export class SeniorDataValidator {
  private static readonly FORBIDDEN_TERMS = [
    'api', 'json', 'http', 'sql', 'database', 'server', 'client',
    'endpoint', 'authentication', 'authorization', 'token', 'hash',
    'algorithm', 'encryption', 'ssl', 'tls', 'cors', 'csrf',
    'git', 'commit', 'push', 'pull', 'merge', 'branch',
    'docker', 'kubernetes', 'deployment', 'pipeline', 'ci/cd',
    'stack trace', 'exception', 'error code', 'debug', 'log',
    'npm', 'node', 'react', 'typescript', 'javascript', 'css',
    'html', 'dom', 'xhr', 'ajax', 'websocket', 'sse'
  ];

  /**
   * Validerar att en str√§ng √§r senior-s√§ker
   */
  static validateSeniorSafeString(text: string): SeniorSafeString {
    const lowerText = text.toLowerCase();
    
    for (const term of this.FORBIDDEN_TERMS) {
      if (lowerText.includes(term)) {
        throw new Error(`Teknisk term uppt√§ckt: "${term}" i "${text}"`);
      }
    }
    
    return text as SeniorSafeString;
  }

  /**
   * Validerar att ett nummer √§r inom senior-s√§kra gr√§nser
   */
  static validateSeniorSafeNumber(num: number): SeniorSafeNumber {
    if (num < 0 || num > 100) {
      throw new Error(`Nummer utanf√∂r senior-s√§kra gr√§nser: ${num}`);
    }
    
    return num as SeniorSafeNumber;
  }

  /**
   * Validerar att ett datum √§r i senior-s√§kert format
   */
  static validateSeniorSafeDate(dateString: string): SeniorSafeDate {
    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) {
        throw new Error('Ogiltigt datum');
      }
      return dateString as SeniorSafeDate;
    } catch (error) {
      throw new Error(`Ogiltigt datum format: ${dateString}`);
    }
  }

  /**
   * Validerar en komplett SeniorFriendlyUpdate
   */
  static validateSeniorFriendlyUpdate(update: any): SeniorFriendlyUpdate {
    return {
      id: update.id,
      timestamp: this.validateSeniorSafeDate(update.timestamp),
      type: update.type,
      title: this.validateSeniorSafeString(update.title),
      message: this.validateSeniorSafeString(update.message),
      encouragingNote: update.encouragingNote ? 
        this.validateSeniorSafeString(update.encouragingNote) : undefined,
      icon: update.icon,
      priority: update.priority,
      category: update.category,
      relatedPhase: update.relatedPhase
    };
  }
}

/**
 * Factory f√∂r att skapa senior-s√§kra datastrukturer
 */
export class SeniorSafeDataFactory {
  /**
   * Skapar en senior-s√§ker projekt√∂versikt fr√•n teknisk data
   */
  static createProjectOverview(technicalData: any): SeniorSafeProjectOverview {
    return {
      projectName: SeniorDataValidator.validateSeniorSafeString(
        technicalData.name || "Ditt projekt"
      ),
      description: SeniorDataValidator.validateSeniorSafeString(
        "Ett sp√§nnande projekt som v√§xer och utvecklas"
      ),
      currentPhase: this.mapTechnicalPhaseToSeniorPhase(technicalData.phase),
      phaseDescription: SeniorDataValidator.validateSeniorSafeString(
        this.getPhaseDescription(technicalData.phase)
      ),
      overallProgress: SeniorDataValidator.validateSeniorSafeNumber(
        Math.min(100, Math.max(0, technicalData.progress || 25))
      ),
      nextSteps: [
        SeniorDataValidator.validateSeniorSafeString("Forts√§tta bygga p√• grunderna"),
        SeniorDataValidator.validateSeniorSafeString("L√§gga till fler funktioner")
      ],
      recentAccomplishments: [
        SeniorDataValidator.validateSeniorSafeString("Skapat en solid grund"),
        SeniorDataValidator.validateSeniorSafeString("S√§krat ditt projekt")
      ],
      motivationalMessage: SeniorDataValidator.validateSeniorSafeString(
        "Du g√∂r fantastiska framsteg! Varje steg f√∂r dig n√§rmare ditt m√•l."
      ),
      estimatedCompletion: SeniorDataValidator.validateSeniorSafeString(
        "Inom n√•gra veckor"
      ),
      lastUpdate: SeniorDataValidator.validateSeniorSafeDate(
        new Date().toISOString()
      )
    };
  }

  private static mapTechnicalPhaseToSeniorPhase(technicalPhase: string): 
    'grundl√§ggande' | 'utveckling' | 'f√∂rb√§ttring' | 'perfektion' {
    switch (technicalPhase?.toLowerCase()) {
      case 'crawl':
      case 'setup':
      case 'initialization':
        return 'grundl√§ggande';
      case 'walk':
      case 'development':
      case 'implementation':
        return 'utveckling';
      case 'run':
      case 'optimization':
      case 'enhancement':
        return 'f√∂rb√§ttring';
      case 'fly':
      case 'autonomous':
      case 'advanced':
        return 'perfektion';
      default:
        return 'grundl√§ggande';
    }
  }

  private static getPhaseDescription(technicalPhase: string): string {
    const phase = this.mapTechnicalPhaseToSeniorPhase(technicalPhase);
    
    switch (phase) {
      case 'grundl√§ggande':
        return "Vi bygger en stark grund f√∂r ditt projekt";
      case 'utveckling':
        return "Vi utvecklar och f√∂rb√§ttrar ditt projekt";
      case 'f√∂rb√§ttring':
        return "Vi finsliper och optimerar allt";
      case 'perfektion':
        return "Ditt projekt √§r n√§stan perfekt!";
      default:
        return "Vi arbetar h√•rt p√• ditt projekt";
    }
  }
}

// Export av alla typer f√∂r enkel import
export type {
  SeniorSafeString,
  SeniorSafeNumber,
  SeniorSafeDate,
  SeniorFriendlyUpdate,
  SeniorSafeProjectOverview,
  SeniorSafePhaseProg,
  SeniorSafePhase,
  SeniorSafeMilestone,
  SeniorSafeCelebration,
  SeniorSafeNotification,
  SeniorSafeError,
  SeniorSafeUserPlan,
  SeniorSafeGoal
};