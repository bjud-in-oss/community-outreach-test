// LEGACY IMPORT: github-client.ts från jules-automation-test
// STATUS: Fungerande GitHub integration med Octokit
// MASTER PLAN 2.0 KOMPATIBILITET: Hög - perfekt för core-agent/tools/

import { Octokit } from '@octokit/rest';
import { AutomationConfig, GitHubIssue, GitHubComment, JulesTask } from './types.js';

export class GitHubClient {
  private octokit: Octokit;
  private config: AutomationConfig;
  private processedTasks: Set<number> = new Set();
  private checkedComments: Set<string> = new Set();

  constructor(config: AutomationConfig) {
    this.config = config;
    this.octokit = new Octokit({
      auth: config.githubToken,
    });
  }

  /**
   * Create a GitHub issue that will trigger Jules
   * MASTER PLAN 2.0: Integreras med core-agent/tools/jules-tool/
   */
  async createJulesTask(task: Omit<JulesTask, 'id' | 'createdAt' | 'status'>): Promise<GitHubIssue> {
    const issue = await this.octokit.rest.issues.create({
      owner: this.config.repoOwner,
      repo: this.config.repoName,
      title: task.title,
      body: `${task.description}

**Auto-generated by Master Plan 2.0 Dubbelt Medvetandesystem**
- Follow Master Plan 2.0 architecture guidelines
- Implement dubbelt medvetandesystem patterns
- Auto-publish PR when complete
- Include comprehensive tests
- Senior-friendly implementation`,
      labels: [this.config.julesLabel],
    });

    return {
      number: issue.data.number,
      title: issue.data.title,
      body: issue.data.body || '',
      labels: issue.data.labels.map(label => typeof label === 'string' ? label : label.name || ''),
      state: issue.data.state as 'open' | 'closed',
      comments: [],
    };
  }

  /**
   * Monitor issue for Jules comments and status updates
   * MASTER PLAN 2.0: Används av communication-bridge för att spåra progress
   */
  async monitorIssue(issueNumber: number): Promise<GitHubComment[]> {
    const comments = await this.octokit.rest.issues.listComments({
      owner: this.config.repoOwner,
      repo: this.config.repoName,
      issue_number: issueNumber,
    });

    return comments.data.map(comment => ({
      id: comment.id,
      user: comment.user?.login || 'unknown',
      body: comment.body || '',
      created_at: comment.created_at,
      isJulesComment: comment.user?.login === 'google-labs-jules[bot]' || 
                     comment.user?.login === 'google-labs-jules' || 
                     comment.user?.login === 'google-labs-julesbot',
    }));
  }

  /**
   * Check if Jules has completed the task by looking for PR link in comments
   * MASTER PLAN 2.0: Kritisk för autonomous merge management
   */
  async checkTaskCompletion(issueNumber: number): Promise<{
    isComplete: boolean;
    prUrl?: string;
    status: 'pending' | 'planning' | 'executing' | 'completed' | 'failed';
  }> {
    const comments = await this.monitorIssue(issueNumber);
    const julesComments = comments.filter(c => c.isJulesComment);
    
    // Prevent duplicate processing
    if (this.processedTasks.has(issueNumber)) {
      return {
        isComplete: true,
        status: 'completed',
        prUrl: `Already processed task #${issueNumber}`
      };
    }
    
    // Look for completion indicators in Jules comments
    for (const comment of julesComments.reverse()) {
      const commentKey = `${issueNumber}-${comment.id}`;
      
      if (this.checkedComments.has(commentKey)) {
        continue;
      }
      
      this.checkedComments.add(commentKey);
      
      if (comment.body.includes('successfully generated a solution') ||
          comment.body.includes('Ready for review') ||
          comment.body.includes('Ready for a review') ||
          comment.body.includes('waiting for you to review') ||
          comment.body.includes('A PR has been created') ||
          comment.body.includes('pull request') ||
          comment.body.includes('Changes can be reviewed')) {
        
        console.log(`✅ Task completion detected for #${issueNumber}`);
        
        // Extract PR URL if present
        const prMatch = comment.body.match(/https:\/\/github\.com\/[^\/]+\/[^\/]+\/pull\/\d+/);
        const reviewMatch = comment.body.match(/https:\/\/jules\.google\.com\/[^\s]+/);
        
        let prUrl = prMatch?.[0];
        if (!prUrl && reviewMatch?.[0]) {
          prUrl = await this.findLinkedPR(issueNumber);
        }
        
        const finalPrUrl = prUrl || reviewMatch?.[0];
        this.processedTasks.add(issueNumber);
        
        return {
          isComplete: true,
          prUrl: finalPrUrl,
          status: 'completed'
        };
      }
      
      if (comment.body.includes('Jules is on it') || 
          comment.body.includes('When finished')) {
        return {
          isComplete: false,
          status: 'executing'
        };
      }
    }

    return {
      isComplete: false,
      status: 'pending'
    };
  }

  /**
   * Get all open issues with Jules label
   * MASTER PLAN 2.0: Används för att övervaka alla aktiva tasks
   */
  async getActiveJulesTasks(): Promise<GitHubIssue[]> {
    const issues = await this.octokit.rest.issues.listForRepo({
      owner: this.config.repoOwner,
      repo: this.config.repoName,
      labels: this.config.julesLabel,
      state: 'open',
    });

    return Promise.all(issues.data.map(async issue => ({
      number: issue.number,
      title: issue.title,
      body: issue.body || '',
      labels: issue.labels.map(label => typeof label === 'string' ? label : label.name || ''),
      state: issue.state as 'open' | 'closed',
      comments: await this.monitorIssue(issue.number),
    })));
  }

  /**
   * Find linked PR from issue timeline/events
   * MASTER PLAN 2.0: Intelligent PR discovery för merge management
   */
  private async findLinkedPR(issueNumber: number): Promise<string | undefined> {
    try {
      const prs = await this.octokit.rest.pulls.list({
        owner: this.config.repoOwner,
        repo: this.config.repoName,
        state: 'open',
        sort: 'created',
        direction: 'desc',
        per_page: 10
      });

      // Find PR that references this issue number
      for (const pr of prs.data) {
        if (pr.body?.includes(`#${issueNumber}`) || 
            pr.body?.includes(`issue ${issueNumber}`) ||
            pr.title.toLowerCase().includes(`issue #${issueNumber}`)) {
          return pr.html_url;
        }
      }

      // If no direct reference, return the most recent PR (likely from Jules)
      if (prs.data.length > 0) {
        return prs.data[0].html_url;
      }

      return undefined;
    } catch (error) {
      console.warn(`Failed to find linked PR for issue #${issueNumber}:`, error);
      return undefined;
    }
  }

  /**
   * Close issue after task completion
   * MASTER PLAN 2.0: Används av autonomous merge system
   */
  async closeTask(issueNumber: number, reason: string = 'Task completed by Master Plan 2.0 Agent'): Promise<void> {
    await this.octokit.rest.issues.createComment({
      owner: this.config.repoOwner,
      repo: this.config.repoName,
      issue_number: issueNumber,
      body: `✅ **Task Completed**\n\n${reason}\n\n*Closed by Master Plan 2.0 Dubbelt Medvetandesystem*`,
    });

    await this.octokit.rest.issues.update({
      owner: this.config.repoOwner,
      repo: this.config.repoName,
      issue_number: issueNumber,
      state: 'closed',
    });
  }
}