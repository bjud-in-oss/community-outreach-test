// LEGACY IMPORT: server.ts fr√•n jules-automation-test
// STATUS: Fungerande Express server med Jules integration
// MASTER PLAN 2.0 KOMPATIBILITET: H√∂g - kan anpassas till dubbelt medvetandesystem

import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import { JulesAutomationAgent } from './jules-agent.js';
import { AutomationConfig, TaskTemplate, AgentWorkflow } from './types.js';
import { GitHubClient } from './github-client.js';
import { AutonomousMergeManager } from './merge/AutonomousMergeManager.js';
import { TasksApiHandler } from './api/tasks.js';

// ES modules compatibility
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load environment variables
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, '..')));

// Initialize Jules Agent
const config: AutomationConfig = {
  githubToken: process.env.GITHUB_TOKEN!,
  repoOwner: process.env.REPO_OWNER!,
  repoName: process.env.REPO_NAME!,
  julesLabel: process.env.JULES_LABEL || 'jules',
  pollInterval: parseInt(process.env.POLL_INTERVAL || '5000'),
  autoApprove: process.env.AUTO_APPROVE === 'true',
};

const julesAgent = new JulesAutomationAgent(config);
const tasksApiHandler = new TasksApiHandler(julesAgent);

// MASTER PLAN 2.0 ADAPTATION NOTE:
// Detta kan integreras med core-agent/tools/jules-tool/
// Server endpoints kan exponeras via communication-bridge/

// Predefined workflows - ANPASSAS TILL MASTER PLAN 2.0 WORKFLOWS
const workflows: Record<string, AgentWorkflow> = {
  'dual-consciousness-setup': {
    id: 'dual-consciousness-setup',
    name: 'Dubbelt Medvetandesystem Setup',
    currentTaskIndex: 0,
    status: 'idle',
    tasks: [
      {
        name: 'conscious-agent-setup',
        title: 'Set up Medvetna Rondellen (Frontend)',
        description: `Create the conscious agent frontend system:
        
Requirements:
- Next.js frontend with senior-friendly UI
- Groq integration for emotional responses
- MCP-UI components for dynamic interfaces
- Tailwind CSS with large buttons and clear text
- Follow Master Plan 2.0 architecture
- Include comprehensive tests`
      },
      {
        name: 'core-agent-setup',
        title: 'Set up K√§rn-agenten (Backend)',
        description: `Create the core agent backend system:
        
Requirements:
- LangChain orchestration system
- LlamaIndex memory management
- Gemini API integration
- Jules tool integration
- Vercel serverless functions
- Follow Master Plan 2.0 architecture`
      }
    ]
  }
};

// Routes - BEH√ÖLLS MEN ANPASSAS TILL MASTER PLAN 2.0

// Serve main page
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'index.html'));
});

// Agent control endpoints - INTEGRERAS MED CORE-AGENT
app.post('/api/agent/start', async (req, res) => {
  try {
    await julesAgent.start();
    res.json({ success: true, message: 'Agent started successfully' });
  } catch (error) {
    console.error('Error starting agent:', error);
    res.status(500).json({ success: false, error: error instanceof Error ? error.message : 'Unknown error' });
  }
});

// Status endpoint - EXPONERAS VIA COMMUNICATION-BRIDGE
app.get('/api/status', (req, res) => {
  try {
    const tasks = julesAgent.getTaskStatus();
    const workflows = julesAgent.getWorkflowStatus();
    
    res.json({
      isRunning: true,
      tasks,
      workflows,
      config: {
        repoOwner: config.repoOwner,
        repoName: config.repoName,
        julesLabel: config.julesLabel
      }
    });
  } catch (error) {
    console.error('Error getting status:', error);
    res.status(500).json({ success: false, error: error instanceof Error ? error.message : 'Unknown error' });
  }
});

// Task management endpoints - INTEGRERAS MED CORE-AGENT/TOOLS/JULES-TOOL
app.post('/api/tasks', async (req, res) => {
  try {
    const { title, description } = req.body;
    
    if (!title || !description) {
      return res.status(400).json({ 
        success: false, 
        error: 'Title and description are required' 
      });
    }

    const taskTemplate: TaskTemplate = {
      name: `custom-${Date.now()}`,
      title,
      description: `${description}

**Auto-generated by Master Plan 2.0 Agent**
- Follow Master Plan 2.0 dubbelt medvetandesystem architecture
- Auto-publish PR when complete
- Include comprehensive tests
- Senior-friendly implementation`
    };

    const task = await julesAgent.executeTask(taskTemplate);
    
    res.json({
      success: true,
      task,
      message: `Task created: Issue #${task.githubIssueNumber}`
    });
  } catch (error) {
    console.error('Error creating task:', error);
    res.status(500).json({ success: false, error: error instanceof Error ? error.message : 'Unknown error' });
  }
});

// Health check
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    config: {
      repoOwner: config.repoOwner,
      repoName: config.repoName,
      hasToken: !!config.githubToken
    }
  });
});

// Start server
app.listen(PORT, async () => {
  console.log(`üöÄ Master Plan 2.0 Server running on http://localhost:${PORT}`);
  console.log(`üìä Monitoring repo: ${config.repoOwner}/${config.repoName}`);
  console.log(`üè∑Ô∏è  Using label: ${config.julesLabel}`);
  
  // Validate configuration
  if (!config.githubToken || config.githubToken.includes('xxxx')) {
    console.warn('‚ö†Ô∏è  GITHUB_TOKEN not properly configured');
    console.log('   Server running in demo mode - update .env with real token for full functionality');
  } else {
    console.log('‚úÖ GitHub token configured');
  }
  
  // Start Jules Agent with error handling
  try {
    await julesAgent.start();
  } catch (error) {
    console.warn('‚ö†Ô∏è  Jules Agent startup had issues, but server is running');
    console.log('   Visit http://localhost:3000 to use the web interface');
  }
});

export default app;